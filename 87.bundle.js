(self.webpackChunk_5=self.webpackChunk_5||[]).push([[87],{87:(e,l,r)=>{"use strict";r.r(l),r.d(l,{default:()=>t});var n=r(617);const t=function(e){let l=document.querySelector("main .container");document.querySelector("header").innerHTML="",fetch("https://server-for-okr.herokuapp.com/").then((e=>(console.log(e),e.json()))).then((r=>{if(e&&-1!==["sneakers","athletic","slides"].indexOf(e))l.innerHTML=(0,n.Z)("h3",e.toUpperCase())+(0,n.Z)("div",(0,n.Z)("div",(0,n.Z)("div",null,"wrapper"),"carousel"),`catalog ${e}`),r[e].forEach((e=>{l.querySelector(".wrapper").innerHTML+=(0,n.Z)("div",(0,n.Z)("a",(0,n.Z)("img",null,null,{src:e.img,alt:e.model}),null,{href:e.url})+(0,n.Z)("br")+(0,n.Z)("h2",e.brand)+(0,n.Z)("br")+(0,n.Z)("h3",e.model)+(0,n.Z)("br")+(0,n.Z)("p",e.price),"item",null,"item_"+e.id)}));else{console.log(r),l.innerHTML=(0,n.Z)("a",(0,n.Z)("h2","SNEAKERS"),null,{href:"#catalog/sneakers"})+(0,n.Z)("div",(0,n.Z)("div",(0,n.Z)("div",null,"wrapper"),"carousel"),"catalog sneakers")+(0,n.Z)("a",(0,n.Z)("h2","ATHLETIC"),null,{href:"#catalog/athletic"})+(0,n.Z)("div",(0,n.Z)("div",(0,n.Z)("div",null,"wrapper"),"carousel"),"catalog athletic")+(0,n.Z)("a",(0,n.Z)("h2","SLIDES"),null,{href:"#catalog/slides"})+(0,n.Z)("div",(0,n.Z)("div",(0,n.Z)("div",null,"wrapper"),"carousel"),"catalog slides");for(let e in r)r[e].forEach((r=>{"sneakers"!==e&&"athletic"!==e&&"slides"!==e||(l.querySelector("."+e+" .wrapper").innerHTML+=(0,n.Z)("div",(0,n.Z)("a",(0,n.Z)("img",null,null,{src:r.img,alt:r.model}),null,{href:r.url})+(0,n.Z)("br")+(0,n.Z)("h2",r.brand)+(0,n.Z)("br")+(0,n.Z)("h3",r.model)+(0,n.Z)("br")+(0,n.Z)("p",r.price),"item",null,"item_"+r.id))}))}return l}))}},617:(e,l,r)=>{"use strict";r.d(l,{Z:()=>n});const n=function(e,l=null,r=null,n=null,t=null){let a=document.createElement(e);if(r&&r.split(" ").forEach((e=>{a.classList.add(e)})),l&&(a.innerHTML=l),t&&(a.id=t),n)for(let e in n)a.setAttribute(e,n[e]);return a.outerHTML}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,