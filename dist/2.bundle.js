(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{13:function(e,t,r){"use strict";t.a=function(e,t=null,r=null,n=null,o=null){let a=document.createElement(e);if(r){r.split(" ").forEach(e=>{a.classList.add(e)})}if(t&&(a.innerHTML=t),o&&(a.id=o),n)for(let e in n)a.setAttribute(e,n[e]);return a.outerHTML}},8:function(e,t,r){"use strict";r.r(t);var n=r(13);t.default=function(){let e=document.querySelector("main .container"),t=document.querySelector("header");fetch("https://server-for-okr.herokuapp.com/").then(e=>(console.log(e),e.json())).then(r=>{t.innerHTML="",e.innerHTML=Object(n.a)("h3","IN CART")+Object(n.a)("div",Object(n.a)("div",Object(n.a)("div",null,"wrapper"),"carousel"),"catalog slides"),0===JSON.parse(window.localStorage.getItem("order")).cart.length&&(e.querySelector(".wrapper").innerHTML=Object(n.a)("div",Object(n.a)("h2","EMPTY"),"item",{style:"width: 100%"}));for(let t in JSON.parse(window.localStorage.getItem("order")).cart){console.log("print i "+t);for(let o in r)r[o].forEach(r=>{JSON.parse(window.localStorage.getItem("order")).cart[t][0]===r.id&&(e.querySelector(".wrapper").innerHTML+=Object(n.a)("div",Object(n.a)("a",Object(n.a)("img",null,null,{src:r.img,alt:r.model}),null,{href:r.url})+Object(n.a)("br")+Object(n.a)("h2",r.brand)+Object(n.a)("br")+Object(n.a)("h3",r.model)+Object(n.a)("br")+Object(n.a)("p",r.price)+Object(n.a)("button","REMOVE","removebutton",null,""+r.id),"item",null,"item_"+r.id))})}if(0!==JSON.parse(window.localStorage.getItem("order")).cart.length){let e=document.createElement("div");e.innerHTML=Object(n.a)("a","CONFIRM ORDER",null,{href:"#order"},"confirmorder"),document.querySelector("main #main_container").appendChild(e)}})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,