(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{13:function(e,t,a){"use strict";t.a=function(e,t=null,a=null,l=null,c=null){let r=document.createElement(e);if(a){a.split(" ").forEach(e=>{r.classList.add(e)})}if(t&&(r.innerHTML=t),c&&(r.id=c),l)for(let e in l)r.setAttribute(e,l[e]);return r.outerHTML}},9:function(e,t,a){"use strict";a.r(t);var l=a(13);t.default=function(e){let t=document.querySelector("main .container");document.querySelector("header").innerHTML="",fetch("https://server-for-okr.herokuapp.com/").then(e=>(console.log(e),e.json())).then(a=>{if(e&&-1!==["sneakers","athletic","slides"].indexOf(e))t.innerHTML=Object(l.a)("h3",e.toUpperCase())+Object(l.a)("div",Object(l.a)("div",Object(l.a)("div",null,"wrapper"),"carousel"),"catalog "+e),a[e].forEach(e=>{t.querySelector(".wrapper").innerHTML+=Object(l.a)("div",Object(l.a)("a",Object(l.a)("img",null,null,{src:e.img,alt:e.model}),null,{href:e.url})+Object(l.a)("br")+Object(l.a)("h2",e.brand)+Object(l.a)("br")+Object(l.a)("h3",e.model)+Object(l.a)("br")+Object(l.a)("p",e.price),"item",null,"item_"+e.id)});else{console.log(a),t.innerHTML=Object(l.a)("a",Object(l.a)("h2","SNEAKERS"),null,{href:"#catalog/sneakers"})+Object(l.a)("div",Object(l.a)("div",Object(l.a)("div",null,"wrapper"),"carousel"),"catalog sneakers")+Object(l.a)("a",Object(l.a)("h2","ATHLETIC"),null,{href:"#catalog/athletic"})+Object(l.a)("div",Object(l.a)("div",Object(l.a)("div",null,"wrapper"),"carousel"),"catalog athletic")+Object(l.a)("a",Object(l.a)("h2","SLIDES"),null,{href:"#catalog/slides"})+Object(l.a)("div",Object(l.a)("div",Object(l.a)("div",null,"wrapper"),"carousel"),"catalog slides");for(let e in a)a[e].forEach(a=>{"sneakers"!==e&&"athletic"!==e&&"slides"!==e||(t.querySelector("."+e+" .wrapper").innerHTML+=Object(l.a)("div",Object(l.a)("a",Object(l.a)("img",null,null,{src:a.img,alt:a.model}),null,{href:a.url})+Object(l.a)("br")+Object(l.a)("h2",a.brand)+Object(l.a)("br")+Object(l.a)("h3",a.model)+Object(l.a)("br")+Object(l.a)("p",a.price),"item",null,"item_"+a.id))})}return t})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,