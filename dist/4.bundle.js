(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{10:function(e,t,l){"use strict";l.r(t);var r=l(13);t.default=function(){let e=document.querySelector("main .container"),t=document.querySelector("header");fetch("https://server-for-okr.herokuapp.com/").then(e=>(console.log(e),e.json())).then(l=>{t.innerHTML=Object(r.a)("div",Object(r.a)("div",Object(r.a)("div",Object(r.a)("div",null,"wrapper_slides")+Object(r.a)("button","<","but",null,"left")+Object(r.a)("button",">","but",null,"right"),"carousel"),"sales"),"container"),l.sale.forEach(e=>{t.querySelector(".wrapper_slides").innerHTML+=Object(r.a)("div",Object(r.a)("a",Object(r.a)("img",null,null,{src:e.img})+Object(r.a)("h3",e.slider_title),null,{href:e.url}),"item_sales")}),e.innerHTML=Object(r.a)("h3","RECOMENDED")+Object(r.a)("div",Object(r.a)("div",Object(r.a)("div",null,"wrapper"),"carousel"),"catalog slides"),l.slides.forEach(t=>{e.querySelector(".wrapper").innerHTML+=Object(r.a)("div",Object(r.a)("a",Object(r.a)("img",null,null,{src:t.img,alt:t.model}),null,{href:t.url})+Object(r.a)("br")+Object(r.a)("h2",t.brand)+Object(r.a)("br")+Object(r.a)("h3",t.model)+Object(r.a)("br")+Object(r.a)("p",t.price),"item",null,"item_"+t.id)})})}},13:function(e,t,l){"use strict";t.a=function(e,t=null,l=null,r=null,n=null){let a=document.createElement(e);if(l){l.split(" ").forEach(e=>{a.classList.add(e)})}if(t&&(a.innerHTML=t),n&&(a.id=n),r)for(let e in r)a.setAttribute(e,r[e]);return a.outerHTML}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,