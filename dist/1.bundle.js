(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{13:function(e,t,n){"use strict";t.a=function(e,t=null,n=null,c=null,r=null){let o=document.createElement(e);if(n){n.split(" ").forEach(e=>{o.classList.add(e)})}if(t&&(o.innerHTML=t),r&&(o.id=r),c)for(let e in c)o.setAttribute(e,c[e]);return o.outerHTML}},7:function(e,t,n){"use strict";n.r(t);var c=n(13);t.default=function(e){let t=document.querySelector("main .container");document.querySelector("header").innerHTML="",fetch("https://server-for-okr.herokuapp.com/").then(e=>(console.log(e),e.json())).then(n=>{for(let r in n)n[r].forEach(n=>{n.name===e&&(t.innerHTML=Object(c.a)("div",Object(c.a)("img",null,null,{src:n.img})+Object(c.a)("div",Object(c.a)("h3",n.title)+Object(c.a)("p",n.desc),"content"),"content_wrapper"))})})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi92aWV3cy9jcmVhdG9yLmpzIiwid2VicGFjazovLy8uL3ZpZXdzL2FjdGlvbi52aWV3LmpzIl0sIm5hbWVzIjpbInRhZyIsImNvbnRlbnQiLCJzZXRfY2xhc3MiLCJzZXRfYXR0ciIsInNldGlkIiwiZWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzcGxpdCIsImZvckVhY2giLCJjbGFzc25hbWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJpbm5lckhUTUwiLCJpZCIsImtleSIsInNldEF0dHJpYnV0ZSIsIm91dGVySFRNTCIsInZpZXdOYW1lIiwibWFpbiIsInF1ZXJ5U2VsZWN0b3IiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImNvbnNvbGUiLCJsb2ciLCJqc29uIiwiZGF0YSIsInNhbGUiLCJuYW1lIl0sIm1hcHBpbmdzIjoieUZBdUJlLElBckJmLFNBQW9CQSxFQUFLQyxFQUFVLEtBQU1DLEVBQVksS0FBTUMsRUFBVyxLQUFNQyxFQUFRLE1BQ2hGLElBQUlDLEVBQUtDLFNBQVNDLGNBQWNQLEdBQ2hDLEdBQUlFLEVBQVcsQ0FDQUEsRUFBVU0sTUFBTSxLQUN0QkMsUUFBU0MsSUFDVkwsRUFBR00sVUFBVUMsSUFBSUYsS0FTekIsR0FOSVQsSUFDQUksRUFBR1EsVUFBWVosR0FFZkcsSUFDQUMsRUFBR1MsR0FBS1YsR0FFUkQsRUFDQSxJQUFLLElBQUlZLEtBQU9aLEVBQ1pFLEVBQUdXLGFBQWFELEVBQUtaLEVBQVNZLElBR3RDLE9BQU9WLEVBQUdZLFksK0JDckJkLG1CQW1DZSxVQWhDZixTQUFjQyxHQUNWLElBQUlDLEVBQU9iLFNBQVNjLGNBQWMsbUJBQ2xDZCxTQUFTYyxjQUFjLFVBQVVQLFVBQVksR0FHN0NRLE1BQU0seUNBQ0RDLEtBQU1DLElBQ0hDLFFBQVFDLElBQUlGLEdBQ0xBLEVBQVNHLFNBRW5CSixLQUFNSyxJQUNILElBQUssSUFBSVosS0FBT1ksRUFDWkEsRUFBS1osR0FBS04sUUFBU21CLElBQ1hBLEVBQUtDLE9BQVNYLElBQ2RDLEVBQUtOLFVBQ0QsV0FEYSxDQUVULE1BRUEsWUFBVyxNQUFPLEtBQU0sS0FBTSxDQUFDLElBQU9lLEVBQVUsTUFDaEQsWUFBVyxNQUNQLFlBQVcsS0FBTUEsRUFBWSxPQUM3QixZQUFXLElBQUtBLEVBQVcsTUFDekIsV0FDSiIsImZpbGUiOiIxLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKS5hcHBlbmRDaGlsZChwYXJzZXIucGFyc2VGcm9tU3RyaW5nKERPTWNyZWF0b3IoJ2RpdicsICdzbXRoJywpLCAndGV4dC9odG1sJykucXVlcnlTZWxlY3RvcigndGFnX29mX0RPTV9lbGVtZW50JykpXG5cbmZ1bmN0aW9uIERPTWNyZWF0b3IodGFnLCBjb250ZW50ID0gbnVsbCwgc2V0X2NsYXNzID0gbnVsbCwgc2V0X2F0dHIgPSBudWxsLCBzZXRpZCA9IG51bGwpIHtcbiAgICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgaWYgKHNldF9jbGFzcykge1xuICAgICAgICBsZXQgdGVtcCA9IHNldF9jbGFzcy5zcGxpdCgnICcpO1xuICAgICAgICB0ZW1wLmZvckVhY2goKGNsYXNzbmFtZSkgPT4ge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc25hbWUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICB9XG4gICAgaWYgKHNldGlkKSB7XG4gICAgICAgIGVsLmlkID0gc2V0aWQ7XG4gICAgfVxuICAgIGlmIChzZXRfYXR0cikge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gc2V0X2F0dHIpIHtcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHNldF9hdHRyW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbC5vdXRlckhUTUw7XG59XG5leHBvcnQgZGVmYXVsdCBET01jcmVhdG9yO1xuLy8gbGV0IGJ1dHRvbm4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2F0YWxvZycpXG4vL1xuLy8gYnV0dG9ubi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+XG4vLyAgICAgZmV0Y2goJ2h0dHBzOi8vYXF1ZW91cy1zaGVsZi01NDg0OC5oZXJva3VhcHAuY29tLycsKVxuLy8gICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbi8vICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4vLyAgICAgICAgIH0pXG4vLyAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbi8vICAgICAgICAgICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluIC5jb250YWluZXIgLmNhdGFsb2cuanVzdF9kcm9wcGVkJykgPT0gbnVsbCl7XG4vLyAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbiAuY29udGFpbmVyJylcbi8vICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZENoaWxkKHBhcnNlci5wYXJzZUZyb21TdHJpbmcoXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBET01jcmVhdG9yKCdkaXYnLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIERPTWNyZWF0b3IoJ2RpdicsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERPTWNyZWF0b3IoJ2RpdicsbnVsbCwnd3JhcHBlcicpXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICxcImNhcm91c2VsXCIpLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjYXRhbG9nIGp1c3RfZHJvcHBlZCcgKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgLCAndGV4dC9odG1sJykucXVlcnlTZWxlY3RvcignLmNhdGFsb2cnKSlcbi8vICAgICAgICAgICAgIH1cbi8vXG4vLyAgICAgICAgICAgICBkYXRhWydqdXN0X2Ryb3BwZWQnXS5mb3JFYWNoKChwcm9kdWN0KSA9Pntcbi8vICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud3JhcHBlcicpXG4vLyAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRDaGlsZChwYXJzZXIucGFyc2VGcm9tU3RyaW5nKCBET01jcmVhdG9yKCdkaXYnLFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignaW1nJyxudWxsLG51bGwseydzcmMnOnByb2R1Y3RbJ2ltZyddLCdhbHQnOnByb2R1Y3RbJ21vZGVsJ119KStcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIERPTWNyZWF0b3IoJ2JyJykrXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBET01jcmVhdG9yKCdoMycscHJvZHVjdFsnYnJhbmQnXSkrXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBET01jcmVhdG9yKCdicicpK1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignaDInLHByb2R1Y3RbJ21vZGVsJ10pK1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignYnInKStcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIERPTWNyZWF0b3IoJ3AnLHByb2R1Y3RbJ3ByaWNlJ10pLCdpdGVtJyxudWxsLCdpdGVtXycrcHJvZHVjdFsnaWQnXSksICd0ZXh0L2h0bWwnKVxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpKVxuLy8gICAgICAgICAgICAgfSlcbi8vICAgICAgICAgfSlcbi8vIClcbi8vXG4vKiAvZ2V0IGluZm9cXCAqL1xuLy9mZXRjaCgnL2dldCcpLnRoZW4oKHJlc3BvbnNlKT0+e1xuLy8gICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbi8vICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpfSkudGhlbigoZGF0YSk9Pntcbi8vICAgICAgICAgY29uc29sZS5sb2coZGF0YVtcImp1c3RfZHJvcHBlZFwiXSl9KVxuXG4iLCJpbXBvcnQgRE9NY3JlYXRvciBmcm9tICcuL2NyZWF0b3IuanMnO1xuXG5cbmZ1bmN0aW9uIHZpZXcodmlld05hbWUpIHtcbiAgICBsZXQgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4gLmNvbnRhaW5lcicpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpLmlubmVySFRNTCA9ICcnO1xuXG5cbiAgICBmZXRjaCgnaHR0cHM6Ly9zZXJ2ZXItZm9yLW9rci5oZXJva3VhcHAuY29tLycsKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7fSlcblxuICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBkYXRhW2tleV0uZm9yRWFjaCgoc2FsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2FsZS5uYW1lID09PSB2aWV3TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbi5pbm5lckhUTUwgPSAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignaW1nJywgbnVsbCwgbnVsbCwgeydzcmMnOiBzYWxlWydpbWcnXX0pICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERPTWNyZWF0b3IoJ2gzJywgc2FsZVsndGl0bGUnXSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcigncCcsIHNhbGVbJ2Rlc2MnXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJ2NvbnRlbnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdjb250ZW50X3dyYXBwZXInKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxufVxuXG5leHBvcnQgZGVmYXVsdCB2aWV3O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==