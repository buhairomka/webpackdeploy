(self.webpackChunk_5=self.webpackChunk_5||[]).push([[728],{617:(e,r,n)=>{"use strict";n.d(r,{Z:()=>t});const t=function(e,r=null,n=null,t=null,l=null){let o=document.createElement(e);if(n&&n.split(" ").forEach((e=>{o.classList.add(e)})),r&&(o.innerHTML=r),l&&(o.id=l),t)for(let e in t)o.setAttribute(e,t[e]);return o.outerHTML}},728:(e,r,n)=>{"use strict";n.r(r),n.d(r,{default:()=>l});var t=n(617);const l=function(e){let r=document.querySelector("main .container");document.querySelector("header").innerHTML="",e?fetch("https://server-for-okr.herokuapp.com/orders/"+e).then((e=>e.json())).then((n=>{-1!=n.id?fetch("https://server-for-okr.herokuapp.com/").then((e=>(console.log(e),e.json()))).then((l=>{r.innerHTML=(0,t.Z)("h3","Order № "+e)+(0,t.Z)("div",(0,t.Z)("div",(0,t.Z)("div",null,"wrapper"),"carousel"),`catalog ${e}`);for(let e in n.cart){console.log("print i "+e);for(let o in l)l[o].forEach((l=>{n.cart[e][0]===l.id&&(r.querySelector(".wrapper").innerHTML+=(0,t.Z)("div",(0,t.Z)("img",null,null,{src:l.img,alt:l.model})+(0,t.Z)("br")+(0,t.Z)("h2",l.brand)+(0,t.Z)("br")+(0,t.Z)("h3",l.model)+(0,t.Z)("br")+(0,t.Z)("p","$"+n.cart[e][1]),"item",null,"item_"+l.id))}))}})):r.innerHTML="Order with №"+e+" does not exists"})):r.innerHTML=(0,t.Z)("form",""+(0,t.Z)("div",(0,t.Z)("input",null,null,{type:"text",name:"name",placeholder:"Name*",required:"",pattern:"[А-Я][а-я]{1,20}"})+(0,t.Z)("span","Incorrect name","form__error"),"form__field")+(0,t.Z)("div",(0,t.Z)("input",null,null,{type:"text",name:"surname",placeholder:"Surname*",required:"",pattern:"[А-Я][а-я]{1,30}"})+(0,t.Z)("span","Incorrect surname","form__error"),"form__field")+(0,t.Z)("div",(0,t.Z)("input",null,null,{type:"tel",name:"phone",placeholder:"Phone number*",required:"",pattern:"[+][0-9]{12}"})+(0,t.Z)("span","Format +380981234567","form__error"),"form__field")+(0,t.Z)("div",(0,t.Z)("input",null,null,{type:"text",name:"address",placeholder:"Address*",required:""}),"form__field")+(0,t.Z)("span","* required fields",null,{style:"color:grey"})+(0,t.Z)("button","Submit",null,{name:"subbutton",type:"submit"}),"form",{name:"exportform"})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,