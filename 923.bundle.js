(self.webpackChunk_5=self.webpackChunk_5||[]).push([[923],{923:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var r=n(617);const l=function(e){let t=document.querySelector("main .container");document.querySelector("header").innerHTML="",fetch("https://server-for-okr.herokuapp.com/").then((e=>(console.log(e),e.json()))).then((n=>{for(let l in n)n[l].forEach((n=>{n.name===e&&(t.innerHTML=(0,r.Z)("div",(0,r.Z)("img",null,null,{src:n.img})+(0,r.Z)("div",(0,r.Z)("h3",n.title)+(0,r.Z)("p",n.desc),"content"),"content_wrapper"))}))}))}},617:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=function(e,t=null,n=null,r=null,l=null){let c=document.createElement(e);if(n&&n.split(" ").forEach((e=>{c.classList.add(e)})),t&&(c.innerHTML=t),l&&(c.id=l),r)for(let e in r)c.setAttribute(e,r[e]);return c.outerHTML}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly81Ly4vdmlld3MvYWN0aW9uLnZpZXcuanMiLCJ3ZWJwYWNrOi8vNS8uL3ZpZXdzL2NyZWF0b3IuanMiXSwibmFtZXMiOlsidmlld05hbWUiLCJtYWluIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJIVE1MIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJjb25zb2xlIiwibG9nIiwianNvbiIsImRhdGEiLCJrZXkiLCJmb3JFYWNoIiwic2FsZSIsIm5hbWUiLCJ0YWciLCJjb250ZW50Iiwic2V0X2NsYXNzIiwic2V0X2F0dHIiLCJzZXRpZCIsImVsIiwiY3JlYXRlRWxlbWVudCIsInNwbGl0IiwiY2xhc3NuYW1lIiwiY2xhc3NMaXN0IiwiYWRkIiwiaWQiLCJzZXRBdHRyaWJ1dGUiLCJvdXRlckhUTUwiXSwibWFwcGluZ3MiOiJpSUFtQ0EsUUFoQ0EsU0FBY0EsR0FDVixJQUFJQyxFQUFPQyxTQUFTQyxjQUFjLG1CQUNsQ0QsU0FBU0MsY0FBYyxVQUFVQyxVQUFZLEdBRzdDQyxNQUFNLHlDQUNEQyxNQUFNQyxJQUNIQyxRQUFRQyxJQUFJRixHQUNMQSxFQUFTRyxVQUVuQkosTUFBTUssSUFDSCxJQUFLLElBQUlDLEtBQU9ELEVBQ1pBLEVBQUtDLEdBQUtDLFNBQVNDLElBQ1hBLEVBQUtDLE9BQVNmLElBQ2RDLEVBQUtHLFdBQ0QsT0FDSSxPQUVBLE9BQVcsTUFBTyxLQUFNLEtBQU0sQ0FBQyxJQUFPVSxFQUFVLE9BQ2hELE9BQVcsT0FDUCxPQUFXLEtBQU1BLEVBQVksUUFDN0IsT0FBVyxJQUFLQSxFQUFXLE1BQ3pCLFdBQ0osNEIsNENDSGxDLFFBckJBLFNBQW9CRSxFQUFLQyxFQUFVLEtBQU1DLEVBQVksS0FBTUMsRUFBVyxLQUFNQyxFQUFRLE1BQ2hGLElBQUlDLEVBQUtuQixTQUFTb0IsY0FBY04sR0FhaEMsR0FaSUUsR0FDV0EsRUFBVUssTUFBTSxLQUN0QlYsU0FBU1csSUFDVkgsRUFBR0ksVUFBVUMsSUFBSUYsTUFHckJQLElBQ0FJLEVBQUdqQixVQUFZYSxHQUVmRyxJQUNBQyxFQUFHTSxHQUFLUCxHQUVSRCxFQUNBLElBQUssSUFBSVAsS0FBT08sRUFDWkUsRUFBR08sYUFBYWhCLEVBQUtPLEVBQVNQLElBR3RDLE9BQU9TLEVBQUdRIiwiZmlsZSI6IjkyMy5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRE9NY3JlYXRvciBmcm9tICcuL2NyZWF0b3IuanMnO1xuXG5cbmZ1bmN0aW9uIHZpZXcodmlld05hbWUpIHtcbiAgICBsZXQgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4gLmNvbnRhaW5lcicpO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWRlcicpLmlubmVySFRNTCA9ICcnO1xuXG5cbiAgICBmZXRjaCgnaHR0cHM6Ly9zZXJ2ZXItZm9yLW9rci5oZXJva3VhcHAuY29tLycsKVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7fSlcblxuICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBkYXRhW2tleV0uZm9yRWFjaCgoc2FsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2FsZS5uYW1lID09PSB2aWV3TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbi5pbm5lckhUTUwgPSAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignaW1nJywgbnVsbCwgbnVsbCwgeydzcmMnOiBzYWxlWydpbWcnXX0pICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERPTWNyZWF0b3IoJ2gzJywgc2FsZVsndGl0bGUnXSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcigncCcsIHNhbGVbJ2Rlc2MnXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgJ2NvbnRlbnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsICdjb250ZW50X3dyYXBwZXInKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cblxufVxuXG5leHBvcnQgZGVmYXVsdCB2aWV3O1xuIiwiLy8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpLmFwcGVuZENoaWxkKHBhcnNlci5wYXJzZUZyb21TdHJpbmcoRE9NY3JlYXRvcignZGl2JywgJ3NtdGgnLCksICd0ZXh0L2h0bWwnKS5xdWVyeVNlbGVjdG9yKCd0YWdfb2ZfRE9NX2VsZW1lbnQnKSlcblxuZnVuY3Rpb24gRE9NY3JlYXRvcih0YWcsIGNvbnRlbnQgPSBudWxsLCBzZXRfY2xhc3MgPSBudWxsLCBzZXRfYXR0ciA9IG51bGwsIHNldGlkID0gbnVsbCkge1xuICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICBpZiAoc2V0X2NsYXNzKSB7XG4gICAgICAgIGxldCB0ZW1wID0gc2V0X2NsYXNzLnNwbGl0KCcgJyk7XG4gICAgICAgIHRlbXAuZm9yRWFjaCgoY2xhc3NuYW1lKSA9PiB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzbmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgICBlbC5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgIH1cbiAgICBpZiAoc2V0aWQpIHtcbiAgICAgICAgZWwuaWQgPSBzZXRpZDtcbiAgICB9XG4gICAgaWYgKHNldF9hdHRyKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBzZXRfYXR0cikge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgc2V0X2F0dHJba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsLm91dGVySFRNTDtcbn1cbmV4cG9ydCBkZWZhdWx0IERPTWNyZWF0b3I7XG4vLyBsZXQgYnV0dG9ubiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXRhbG9nJylcbi8vXG4vLyBidXR0b25uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT5cbi8vICAgICBmZXRjaCgnaHR0cHM6Ly9hcXVlb3VzLXNoZWxmLTU0ODQ4Lmhlcm9rdWFwcC5jb20vJywpXG4vLyAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuLy8gICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuLy8gICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbi8vICAgICAgICAgfSlcbi8vICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuLy8gICAgICAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4gLmNvbnRhaW5lciAuY2F0YWxvZy5qdXN0X2Ryb3BwZWQnKSA9PSBudWxsKXtcbi8vICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluIC5jb250YWluZXInKVxuLy8gICAgICAgICAgICAgICAgICAgICAuYXBwZW5kQ2hpbGQocGFyc2VyLnBhcnNlRnJvbVN0cmluZyhcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIERPTWNyZWF0b3IoJ2RpdicsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignZGl2Jyxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignZGl2JyxudWxsLCd3cmFwcGVyJylcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLFwiY2Fyb3VzZWxcIiksXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhdGFsb2cganVzdF9kcm9wcGVkJyApXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAsICd0ZXh0L2h0bWwnKS5xdWVyeVNlbGVjdG9yKCcuY2F0YWxvZycpKVxuLy8gICAgICAgICAgICAgfVxuLy9cbi8vICAgICAgICAgICAgIGRhdGFbJ2p1c3RfZHJvcHBlZCddLmZvckVhY2goKHByb2R1Y3QpID0+e1xuLy8gICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53cmFwcGVyJylcbi8vICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZENoaWxkKHBhcnNlci5wYXJzZUZyb21TdHJpbmcoIERPTWNyZWF0b3IoJ2RpdicsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBET01jcmVhdG9yKCdpbWcnLG51bGwsbnVsbCx7J3NyYyc6cHJvZHVjdFsnaW1nJ10sJ2FsdCc6cHJvZHVjdFsnbW9kZWwnXX0pK1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcignYnInKStcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIERPTWNyZWF0b3IoJ2gzJyxwcm9kdWN0WydicmFuZCddKStcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIERPTWNyZWF0b3IoJ2JyJykrXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBET01jcmVhdG9yKCdoMicscHJvZHVjdFsnbW9kZWwnXSkrXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBET01jcmVhdG9yKCdicicpK1xuLy8gICAgICAgICAgICAgICAgICAgICAgICAgRE9NY3JlYXRvcigncCcscHJvZHVjdFsncHJpY2UnXSksJ2l0ZW0nLG51bGwsJ2l0ZW1fJytwcm9kdWN0WydpZCddKSwgJ3RleHQvaHRtbCcpXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3RvcignZGl2JykpXG4vLyAgICAgICAgICAgICB9KVxuLy8gICAgICAgICB9KVxuLy8gKVxuLy9cbi8qIC9nZXQgaW5mb1xcICovXG4vL2ZldGNoKCcvZ2V0JykudGhlbigocmVzcG9uc2UpPT57XG4vLyAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuLy8gICAgIHJldHVybiByZXNwb25zZS5qc29uKCl9KS50aGVuKChkYXRhKT0+e1xuLy8gICAgICAgICBjb25zb2xlLmxvZyhkYXRhW1wianVzdF9kcm9wcGVkXCJdKX0pXG5cbiJdLCJzb3VyY2VSb290IjoiIn0=