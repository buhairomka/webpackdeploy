(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{11:function(e,t,r){"use strict";r.r(t);var n=r(13);t.default=function(e){let t=document.querySelector("main .container");document.querySelector("header").innerHTML="",e?fetch("https://server-for-okr.herokuapp.com/orders/"+e).then(e=>e.json()).then(r=>{-1!=r.id?fetch("https://server-for-okr.herokuapp.com/").then(e=>(console.log(e),e.json())).then(a=>{t.innerHTML=Object(n.a)("h3","Order № "+e)+Object(n.a)("div",Object(n.a)("div",Object(n.a)("div",null,"wrapper"),"carousel"),"catalog "+e);for(let e in r.cart){console.log("print i "+e);for(let l in a)a[l].forEach(a=>{r.cart[e][0]===a.id&&(t.querySelector(".wrapper").innerHTML+=Object(n.a)("div",Object(n.a)("img",null,null,{src:a.img,alt:a.model})+Object(n.a)("br")+Object(n.a)("h2",a.brand)+Object(n.a)("br")+Object(n.a)("h3",a.model)+Object(n.a)("br")+Object(n.a)("p","$"+r.cart[e][1]),"item",null,"item_"+a.id))})}}):t.innerHTML="Order with №"+e+" does not exists"}):t.innerHTML=Object(n.a)("form",""+Object(n.a)("div",Object(n.a)("input",null,null,{type:"text",name:"name",placeholder:"Name*",required:"",pattern:"[А-Я][а-я]{1,20}"})+Object(n.a)("span","Incorrect name","form__error"),"form__field")+Object(n.a)("div",Object(n.a)("input",null,null,{type:"text",name:"surname",placeholder:"Surname*",required:"",pattern:"[А-Я][а-я]{1,30}"})+Object(n.a)("span","Incorrect surname","form__error"),"form__field")+Object(n.a)("div",Object(n.a)("input",null,null,{type:"tel",name:"phone",placeholder:"Phone number*",required:"",pattern:"[+][0-9]{12}"})+Object(n.a)("span","Format +380981234567","form__error"),"form__field")+Object(n.a)("div",Object(n.a)("input",null,null,{type:"text",name:"address",placeholder:"Address*",required:""}),"form__field")+Object(n.a)("span","* required fields",null,{style:"color:grey"})+Object(n.a)("button","Submit",null,{name:"subbutton",type:"submit"}),"form",{name:"exportform"})}},13:function(e,t,r){"use strict";t.a=function(e,t=null,r=null,n=null,a=null){let l=document.createElement(e);if(r){r.split(" ").forEach(e=>{l.classList.add(e)})}if(t&&(l.innerHTML=t),a&&(l.id=a),n)for(let e in n)l.setAttribute(e,n[e]);return l.outerHTML}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,